xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(log(xs),ys,type='l')
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,log(ys),type='l')
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l')
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l');lines(xs,1/xs)
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l');lines(xs,1/xs,col='red')
1/xs
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l');lines(xs,1/xs,col='red')
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l');lines(xs,1/xs/ys[which(xs==1)],col='red')
lines(xs,1/xs/ys[which(xs==1)],col='red')
xs
1/xs/ys[which(xs==1)]
which(xs==1)
xs=seq(0,100,0.1);ys=dgamma(xs,shape=0.001,rate=0.001);plot(xs,ys,type='l');lines(xs,1/xs*ys[which(xs==1)],col='red')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
LVnoise10
iters=1000
tune=0.01
thin=10
th=c(th1 = 1, th2 = 0.005, th3 = 0.6)
p=length(th)
ll=-1e99
thmat=matrix(0,nrow=iters,ncol=p)
colnames(thmat)=names(th)
# Main pMCMC loop
for (i in 1:iters) {
message(paste(i,""),appendLF=FALSE)
for (j in 1:thin) {
thprop=th*exp(rnorm(p,0,tune))
llprop=mLLik(thprop)
if (log(runif(1)) < llprop - ll) {
th=thprop
ll=llprop
}
}
thmat[i,]=th
}
message("Done!")
# Compute and plot some basic summaries
mcmcSummary(thmat)
beta=0.1
gamma=10
lambda=1
plot(rnbinom(100,beta*lambda,1/(gamma+1))
plot(rnbinom(100,beta*lambda,1/(gamma+1)))
plot(rnbinom(100,beta*lambda,1/(gamma+1)))
plot(rpois(1,gamma*rpois(100,beta*gamma)))
plot(rpois(1,gamma*rpois(100,beta*gamma)))
plot(rpois(1,gamma*rpois(100,beta*gamma)))
rpois(10,1:10)
rpois(100,1:100)
plot(rpois(100,gamma*rpois(100,beta*gamma)))
plot(rnbinom(100,beta*lambda,1/(gamma+1)))
plot(rpois(100,gamma*rpois(100,beta*gamma)))
#poisson-poisson compound
data=rpois(100,gamma*rpois(100,beta*gamma))
summary(data)
print(c(mean(data),var(data))
print(c(mean(data),var(data)))
print(c(mean(data),var(data)))
#negbin approximation
data=rnbinom(100,beta*lambda,1/(gamma+1))
print(c(mean(data),var(data)))
#poisson-poisson compound
data=rpois(100,gamma*rpois(100,beta*lambda))
print(c(mean(data),var(data)))
beta=0.2
gamma=10
lambda=1
#poisson-poisson compound
data=rpois(100,gamma*rpois(100,beta*lambda))
print(c(mean(data),var(data)))
#poisson-poisson compound
data=rpois(1000,gamma*rpois(1000,beta*lambda))
print(c(mean(data),var(data)))
#negbin approximation
data=rnbinom(1000,beta*lambda,1/(gamma+1))
print(c(mean(data),var(data)))
hist(data)
hist(data,breaks = 0:100)
hist(data,breaks = 0:20)
hist(data,breaks = 0:10)
hist(data,breaks = 0:10)
hist(data,breaks = 0:20)
hist(data,breaks = 20)
data[which(data>20)]=20
hist(data,breaks = 0:20,)
source('~/Untitled.R', echo=TRUE)
data[which(data>20)]=20
print(c(mean(data),var(data)))
#poisson-poisson compound
data=rpois(1000,gamma*rpois(1000,beta*lambda))
print(c(mean(data),var(data)))
#negbin approximation
data=rnbinom(1000,beta*lambda,1/(gamma+1))
print(c(mean(data),var(data)))
source('~/Untitled.R', echo=TRUE)
library(pomp)
?pomp
library(phylodyn)
?mcmc_sampling
vignette()
vignette(package='phylodyn')
set.seed(8675309)
library(phylodyn)
traj = logistic_traj
samp_end = 48
nsamps   = 500
Cprop      = nsamps/integrate(traj_beta, 0, samp_end, traj=traj, beta=1)$value
samp_times = pref_sample(traj, c=Cprop, lim=c(0,samp_end), beta=1)
gene = coalsim(samp_times = samp_times, n_sampled = rep(1, length(samp_times)),
traj = traj, lower_bound = 10)
gene
res_BNPR    = BNPR(data = gene, lengthout = 100)
plot_BNPR(res_BNPR, traj = traj, main="BNPR", ylim = c(1, 700))
set.seed(0)
dates=seq(0,1,length.out = 50)
t=bounded_sample_phylo(dates,rep(1,length(dates)),10,-1)
library(BoundedCoalescent)
library(phylodyn)
library(ape)
set.seed(0)
dates=seq(0,1,length.out = 50)
t=bounded_sample_phylo(dates,rep(1,length(dates)),10,-1)
library(BoundedCoalescent)
library(phylodyn)
library(ape)
set.seed(0)
dates=seq(0,1,length.out = 50)
t=bounded_sample_phylo(dates,rep(1,length(dates)),100,-1)
?bounded_sample_phylo
source('~/Projects/bounded/sky.R', echo=TRUE)
install.packages(c("ade4", "adegenet", "aplot", "argparse", "backports", "beeswarm", "BiocManager", "bitops", "blob", "boot", "brio", "broom", "bslib", "cachem", "callr", "class", "cli", "coga", "colorspace", "conquer", "cpp11", "crayon", "credentials", "crosstalk", "cubature", "curl", "data.table", "deldir", "dendextend", "depmixS4", "desc", "deSolve", "devtools", "diffobj", "digest", "diversitree", "downlit", "dplyr", "DT", "e1071", "ellipsis", "fansi", "fastmatch", "fields", "future", "gargle", "generics", "gert", "gh", "glue", "goftest", "googledrive", "googlesheets4", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "influenceR", "isoband", "jpeg", "jquerylib", "KernSmooth", "knitr", "labelVector", "later", "lattice", "lifecycle", "lubridate", "manipulateWidget", "maps", "MASS", "Matrix", "matrixStats", "maxLik", "MCMCpack", "memuse", "metR", "mgcv", "mime", "mvtnorm", "nlme", "nnet", "openssl", "openxlsx", "parallelly", "parsedate", "pbapply", "phytools", "pillar", "pkgload", "plotrix", "pomp", "posterior", "processx", "proxy", "pryr", "quantreg", "R6", "ragg", "raster", "rcmdcheck", "RcppArmadillo", "RcppGSL", "RCurl", "readr", "rehh", "remotes", "reprex", "rgdal", "rgeos", "rgl", "rjags", "rlang", "rmarkdown", "rngtools", "roxygen2", "rvcheck", "rversions", "rvest", "s2", "sass", "segmented", "seqinr", "sessioninfo", "sf", "shiny", "sp", "spam", "spatial", "spatstat", "spatstat.core", "spatstat.geom", "spatstat.linnet", "spatstat.utils", "spData", "spdep", "splancs", "stringi", "survival", "systemfonts", "testthat", "textshaping", "tibble", "tidyr", "tidyselect", "tidytree", "tinytex", "units", "usethis", "utf8", "uuid", "vctrs", "viridis", "visNetwork", "waldo", "xfun", "XML", "zip"))
library(BoundedCoalescent)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 10000)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 10)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 100)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1000)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 10000)
set.seed(2)
bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 2000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 3000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 4000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 5000)
set.seed(2);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 4000)
for (i in 1:10) {print(i);set.seed(i);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1000)}
for (i in 1:10) {print(i);set.seed(i);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 100)}
for (i in 1:10000) {print(i);set.seed(i);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1)}
set.seed(5328);bounded_sample_times(t = 0, l = 50, ne = 1, b = -0.5, nsam = 1)
?reorder
library(ape)
?reorder
?reorder.phylo
?ladderize
?dist.nodes
?keep.tip
?unique
library(BactDating)
source('~/Projects/mtub/neg-tb/model.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
?plot.phylo
?plot.phylo.extra
plot(t,show.tip.label = F,show.node.label = F,font=1,label.offset = 0.01,cex=1.5)
dev.off()
dev.off()
dev.off()
dev.off()
plot(t,show.tip.label = F,show.node.label = F,font=1,label.offset = 0.01,cex=1.5)
vpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$yy[M_node_index]
vpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$yy
vpos
vpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$yy
lpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$xx
vpos
lpos
?test
?te
?text
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
vpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$yy
lpos = get("last_plot.phylo", envir = .PlotPhyloEnv)$xx
text(lpos[1:10],vpos[1:10],'lol')
plot(t,show.tip.label = T,show.node.label = F,font=1,label.offset = 0.01,cex=1.5)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
substr('lol',2,10)
substr(c('lol','ol'),2,10)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
?text
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
source('~/Projects/epiphylo/DetectImports/run/paper/fig1.R', echo=TRUE)
library(ape)
?multiphylo
x <- rmtree(10, 20)
x
class(x)
x[[1]]
class(x[[1]])
vector('numeric', 10)
?lgamma
lgamma(0)
0*Inf
?browser
TransPhylo::getGenerationTimeDist(
?getGenerationTimeDist
?getInfectionTimeDist
?distTips
??distTips
?round
round(0.001,0.3)
round(0.001,.3)
?axis
save.image
library(ape)
ls -lstr
?plot.phylo
devtools::install_github('emvolz-phylodynamics/mlesky-testing')
devtools::install_github('emvolz/mlesky-testing')
library(ape)
tree=read.tree('~/Downloads/tree.nwk')
plot(tree)
axisPhylo(1)
data=read.csv('~/Downloads/data.csv')
View(data)
dates=data[,7]
names(dates)=data[,1]
dates[1]
dates[2]
library(BactDating)
roottotip(tree,dates)
tree2=initRoot(tree)
tree2=initRoot(tree,dates)
roottotip(tree2,dates)
res=bactdate(tree,dates,showProgress = T)
plot(res)
plot(res,'treeCI')
plot(res,'trace')
res
?bactdate
1-1/1.005
365/12
2+2 %lol
2+2 #lol
?pexp
qexp(0.5,rate=1/30)
qexp(0.95,rate=1/30)
qexp(0.95,rate=1/30)
?qexp
-log(0.05)
-log(0.05)*30
source('~/Desktop/test.R', echo=TRUE)
i
j
n*n
166.53/18.25
365*0.025
?corrcoef
library(vegan)
?mantel
?egrep
?grep
444335*2
record=list(1);record=record[max(1,round(length(record)*burnin)):length(record)]
record=list(1);burnin=0.5;record=record[max(1,round(length(record)*burnin)):length(record)]
record
record=list(1)
l=list(1,2,3)
l
length(l)
l[1]
class(l)
class(l[1])
length(l[1])
class(l[[1]])
196*sqrt(1/938+1/677)
938/677
1.96*sqrt(1/938+1/677)
1.386-0.098
1.386+0.098
a=938 ; b=677
1.95*sqrt(1/a+1/b)=9.88
1.95*sqrt(1/a+1/b)
mu=0.01428
?dnbinom
w=1;dnbinom(0,mu*1/w,w/(1+w))
(1/(1+w))^(mu*1/w)
w=2;dnbinom(0,mu*1/w,1-w/(1+w))
(1/(1+w))^(mu*1/w)
t=1exp(-mu*t)
t=1;exp(-mu*t)
mu=0.014278175
t=1;exp(-mu*t)
t=1;exp(-mu*5)
mu=0.032876712
mu=0.0329
t=1;exp(-mu*5)
w=2;dnbinom(0,mu*5/w,1-w/(1+w))
(1/(1+w))^(mu*5/w)
888670/12
round(888670/12)
rep(5,2)
109/(109+c(932,299,529))
109/(c(932,299,529))
109/(c(392,299,529))
109/(109+c(392,299,529))
t=units::read.table('~/Downloads/resuggestionsonaddressingareviewerscommentontheco/IncHI2.per_branch_statistics.csv',sep='\t',as.is=T,header=T,comment.char="")
t=utils::read.table('~/Downloads/resuggestionsonaddressingareviewerscommentontheco/IncHI2.per_branch_statistics.csv',sep='\t',as.is=T,header=T,comment.char="")
View(t)
View(t)
library(lubridate)
decimal_date(2020)
date_decimal(2020)
date_decimal(2022.15)
library(nlm)
?nlm
?dist
?ddist
remove.packages('xlsx','readxl')
remove.packages('xlsx')
remove.packages('readxl')
remove.packages('readxl')
remove.packages('readxl')
library(BactDating)
dates= c(2009,2002,1997,2007,2013,2000,2017,2002,1995,2012,1995,2014,2002,
2001,1996)
d= cbind(dates, dates+1)
library(ape)
tree=rtree(15)
rooted= initRoot(tree, d)
d
bactdate(tree,date)
bactdate(tree,dates)
bactdate(tree,dates,showProgress = T)
View(initRoot)
rooted= initRoot(tree, d)
d
rooted= initRoot(tree, d)
rooted= initRoot(tree, rowMeans(d))
rowMeans(d)
setwd("~/Projects/phylodynamics/mlesky-experiments/cholera")
library(ape)
library(mlesky)
rm(list=ls())
set.seed(0)
t=read.tree('cholerae.nwk')
t$root.time=1950
res=suggest_res(t)#optim_res_aic(t,ncpu=6,res=10:50,model=2)
res
print(res)
source("~/Projects/phylodynamics/mlesky-experiments/cholera/cholerae.R", echo=TRUE)
fit$tau
system('open cholerae.pdf')
plot(fit,logy = F,ggplot = T)
plot(fit,logy = F)
res
fit=parboot(fit,nrep=100,ncpu=6)
fit=mlskygrid(t,res=res,tau=NULL,tau_lower = 0.001,tau_upper = 10000,model = 2,ncpu=6)
fit=parboot(fit,nrep=100,ncpu=6)
fit=parboot(fit,nrep=100,ncpu=6)
parboot(fit,nrep=100,ncpu=6)
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuConst.R", echo=TRUE)
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuConst.R", echo=TRUE)
system('open simuConstResults.pdf')
system('open simuConstResult.pdf')
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuBottleneck.R", echo=TRUE)
system('open simuBottle.pdf')
parboot(fit,nrep = 100,ncpu=6)
setwd("~/Projects/phylodynamics/mlesky-experiments/cholera")
library(ape)
library(mlesky)
rm(list=ls())
set.seed(0)
t=read.tree('cholerae.nwk')
t$root.time=1950
res=suggest_res(t)#optim_res_aic(t,ncpu=6,res=10:50,model=2)
print(res)
fit=mlskygrid(t,res=res,tau=NULL,tau_lower = 0.001,tau_upper = 10000,model = 2,ncpu=6)
fit=parboot(fit,nrep=100,ncpu)
fit=parboot(fit,nrep=100,ncpu=6)
fit
fit$ne
fit$ne_ci
setwd("~/Projects/phylodynamics/mlesky-experiments/hiv")
library( ape )
library( mlesky )
library( lubridate )
dtre <- read.tree( 'nc_refs_b.dater' )
md <- read.csv( 'nc_refs_b.dates.csv', stringsAs=FALSE )
sts <- setNames(  md$date[ match( dtre$tip.label, md$name )],  dtre$tip.label )
dsg2 <- mlskygrid( dtre, sampleTimes = sts,  tau = NULL, tau_lower = 1e-3, tau_upper = 1e2 , model=2 , ncpu = 8)
dsg2 <- parboot( dsg2, nrep = 100, ncpu = 4 )
dsg2$ne_ci
dsg2 <- mlskygrid( dtre, sampleTimes = sts,  tau = NULL, tau_lower = 1e-3, tau_upper = 1e2 , model=2 , ncpu = 8)
dsg2 <- parboot( dsg2, nrep = 10, ncpu = 6 )
dsg2 <- mlskygrid( dtre, tau = NULL, tau_lower = 1e-3, tau_upper = 1e2 , model=2 , ncpu = 8)
dsg2 <- mlskygrid( dtre, tau = 1 , model=2 , ncpu = 6)
dsg2 <- parboot( dsg2, nrep = 10, ncpu = 6 )
dsg2 <- parboot( dsg2, nrep = 10, ncpu = 6 )
dsg2 <- mlskygrid( dtre, sampleTimes=sts,tau = 1 , model=2 , ncpu = 6)
dsg2 <- parboot( dsg2, nrep = 10, ncpu = 6 )
dsg2 <- mlskygrid( dtre, tau = 1 , model=2 , ncpu = 6)
dsg2 <- parboot( dsg2, nrep = 10, ncpu = 6 )
dsg2
dsg2$sampleTimes
dsg2 <- mlskygrid( dtre, sampleTimes=sts,tau = 1 , model=2 , ncpu = 6)
dsg2$sampleTimes
library(ape)
library(mlesky)
rm(list=ls())
set.seed(0)
t=read.tree('cholerae.nwk')
t$root.time=1950
res=suggest_res(t)#optim_res_aic(t,ncpu=6,res=10:50,model=2)
setwd("~/Projects/phylodynamics/mlesky-experiments/cholera")
library(ape)
library(mlesky)
rm(list=ls())
set.seed(0)
t=read.tree('cholerae.nwk')
t$root.time=1950
res=suggest_res(t)#optim_res_aic(t,ncpu=6,res=10:50,model=2)
print(res)
fit=mlskygrid(t,res=res,tau=NULL,tau_lower = 0.001,tau_upper = 10000,model = 2,ncpu=6)
fit$sampleTimes=
fit=parboot(fit,nrep=100,ncpu=6)
t$root.time+dist.nodes(t)[Ntip(t)+1,1:Ntip(t)]
fit$sampleTimes=t$root.time+dist.nodes(t)[Ntip(t)+1,1:Ntip(t)]
fit=parboot(fit,nrep=100,ncpu=6)
source("~/Projects/phylodynamics/mlesky-experiments/cholera/cholerae.R", echo=TRUE)
sts
names(sts)
t$tip.label
library(ape)
library(mlesky)
rm(list=ls())
set.seed(0)
t=read.tree('cholerae.nwk')
t$root.time=1950
sts=t$root.time+dist.nodes(t)[Ntip(t)+1,1:Ntip(t)]
names(sts)=t$tip.label
res=suggest_res(t)#optim_res_aic(t,ncpu=6,res=10:50,model=2)
print(res)
fit=mlskygrid(t,sampleTimes = sts,res=res,tau=NULL,tau_lower = 0.001,tau_upper = 10000,model = 2,ncpu=6)
plot(fit,logy = F)
fit=parboot(fit,nrep=100,ncpu=6)
pdf('cholerae.pdf',7,8)
par(mfrow=c(2,1),mar=c(4,4,1,4))
plot(t,show.tip.label=F)
axisPhylo(1,backward = F)
plot(fit,logy = F)
dev.off()
system('open cholerae.pdf')
system('open cholerae.pdf')
library(ape)
library(mlesky)
rm(list=ls())
set.seed(2)
alphaFun=function(x){if (x<2005 || x>2010) 10 else 1}
sampleDates=seq(2000,2020,0.1)
tree=simCoal(sampleDates,alphaFun,alphaMin = 0.1)
res=optim_res_aic(tree,ncpu=6,res=1:50,model=2)
res
res=suggest_res(tree)
res
res=suggest_res(tree)#optim_res_aic(tree,ncpu=6,res=1:50,model=2)
print(res)
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuBottleneck.R", echo=TRUE)
tree$root.time
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuBottleneck.R", echo=TRUE)
source("~/Projects/phylodynamics/mlesky-experiments/simulations/simuBottleneck.R", echo=TRUE)
pdf('simuBottle.pdf',7,10)
par(mfrow=c(3,1),mar=c(4,4,1,4))
if (!is.null(tree$root.time)) from=tree$root.time else from=-max(dist.nodes(tree)[Ntip(tree)+1,])
to=from+max(dist.nodes(tree)[Ntip(tree)+1,])
xs=seq(from=from,to=to,length.out=100)
ys=xs
for (i in 1:length(ys)) ys[i]=alphaFun(ys[i])
plot(xs,ys,type='l',xlab='',ylab='Population size', bty='l',ylim=c(0,1.05*max(ys)))
plot(tree,show.tip.label = F)
axisPhylo(1,backward = F)
plot(fit,logy = F)
dev.off()
system('open simuBottle.pdf')
?suggest_res
